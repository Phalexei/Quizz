package imag.quizz.client.game;

import imag.quizz.client.network.ConnectionManager;
import imag.quizz.client.ui.Window;
import imag.quizz.common.Config;
import imag.quizz.common.Controller;
import imag.quizz.common.network.MessageHandler;
import imag.quizz.common.network.SocketHandler;
import imag.quizz.common.protocol.PingPongTask;
import imag.quizz.common.protocol.message.*;
import imag.quizz.common.tool.Log;

/**
 * Created by Ribesg.
 */
public class ClientController extends MessageHandler implements Controller {

    private       Window            window;
    private final Config            config;
    private final ConnectionManager connectionManager;
    private final PingPongTask      pingPongTask;
    private       int               playerId;

    public ClientController(final Config config) {
        super("Controller");
        this.window = null;
        this.config = config;
        this.connectionManager = new ConnectionManager(config, this);
        this.playerId = -1; // -1 is invalid : no ID yet
        this.pingPongTask = new PingPongTask(this, 5_000);
        this.pingPongTask.start();
    }

    public void setWindow(final Window window) {
        this.window = window;
    }

    public void onButtonClick(final String textClicked) {
        Log.info("Réponse sélectionnée : \"" + textClicked + '"');
        this.window.lockButtons();
    }

    @Override
    public void handleMessage(final SocketHandler socketHandler, final Message message) {
        switch (message.getCommand()) {
            // all valid messages
            case PING:
                this.connectionManager.send(new PongMessage(this.playerId, message));
                break;
            case PONG:
                this.pingPongTask.pong(socketHandler.getSocket().getLocalPort());
                break;
            case GAMES:
                this.updateAvailableGames((GameMessage) message);
                break;
            case THEMES:
                this.showAvailableThemes((ThemesMessage) message);
                break;
            case QUESTION:
                this.showQuestion((QuestionMessage) message);
                break;
            case NOANSWER:
                this.questionTimeout((NoAnswerMessage) message);
                break;
            case WAIT:
                this.waitForOpponent((WaitMessage) message);
                break;
            case END:
                final EndMessage endMessage = (EndMessage) message;
                this.gameEnded(endMessage.getUserScore(), endMessage.getOpponentScore());
                break;

            // ack messages
            case OK:
                // wut
                break;
            case NOK:
                // wut
                break;

            // invalid messages
            case INIT:
            case REGISTER:
            case LOGIN:
            case PLAY:
            case DROP:
            case NEW:
            case THEME:
            case GAME:
            case ANSWER:
                //TODO: wtf : messages for servers
            default:
                // TODO KEK
        }
    }

    private void waitForOpponent(final WaitMessage message) {
        //TODO: autogenerated stub
    }

    private void questionTimeout(final NoAnswerMessage message) {
        //TODO: autogenerated stub
    }

    private void showQuestion(final QuestionMessage message) {
        //TODO: autogenerated stub
    }

    private void showAvailableThemes(final ThemesMessage message) {
        //TODO: autogenerated stub
    }

    private void updateAvailableGames(final GameMessage message) {
        //TODO: autogenerated stub
    }

    private void gameEnded(final int userScore, final int opponentScore) {
        //TODO: autogenerated stub
    }

    @Override
    public void lostConnection(final SocketHandler socketHandler) {
        this.pingPongTask.removePort(this.connectionManager.getSocketHandler().getSocket().getLocalPort());
        this.connectionManager.lostConnection();
        this.connect();
    }

    @Override
    public void pingTimeout(final int port) {
        if (this.playerId != -1) {
            this.lostConnection(null);
        }
    }

    @Override
    public void ping(final int port) {
        if (this.playerId != -1) {
            this.connectionManager.send(new PingMessage(this.playerId));
        }
    }

    public void connect() {
        try {
            this.connectionManager.tryConnect();
            this.pingPongTask.addPort(this.connectionManager.getSocketHandler().getSocket().getLocalPort());
            this.window.connected();
        } catch (final ConnectionManager.NoServerException e) {
            this.window.noConnection();
        }
    }

    public void login(final String username, final char[] password) {
        this.connectionManager.send(new LoginMessage(this.playerId, username, password.toString()));
    }

    public void register(final String username, final char[] password) {
        this.connectionManager.send(new RegisterMessage(this.playerId, username, new String(password)));
    }
}
